@page "/media"
@inject IStyled Styled

<Styled @bind-Classname="@p1">
    font-size: 30px;
    @@media (min-width: 420px) {
        font-size: 50px;
    }
</Styled>

<Styled @bind-Classname="@p3" MediaQuery="MediaQueries.Mobile">
    color: red;
</Styled>

<Heading>Media Queries</Heading>

<Paragraph>Using media queries in BlazorStyled works just like using media queries in regular css except you don’t have to specify a selector inside the block, 
    you can put your css directly in the css block.</Paragraph>

<p class="@p1">Some text!</p>

<PrettyCode CodeFile="_content/SampleCore/media1.html" />

<Heading HeadingSize="HeadingSize.H3">Reusable Media Queries</Heading>

<Paragraph>Media queries can be useful to create responsive apps but repeating them is annoying and can lead to inconsistencies. 
    Instead of rewriting them each time you use them, you can move them into constants and refer to the variable each time you want to use them like this:</Paragraph>

<p class="@p2">Some other text!</p>

<PrettyCode CodeFile="_content/SampleCore/media2.html" />

<Paragraph>BlazorStyled comes with some common media queries pre-defined:</Paragraph>

<p class="@p3">This paragraph will be red on a mobile phone</p>

<PrettyCode CodeFile="_content/SampleCore/media3.html" />

@code {
    private string p1, p2, p3;

    private int[] breakpoints = new int[] { 576, 768, 992, 1200 };

    protected override void OnInit()
    {
        var mq = (from b in breakpoints
                  select $"@media (min-width: {b}px)").ToArray();

        p2 = Styled.Css($@"
            color: green;
            {mq[0]} {{
              color: gray;
            }}
            {mq[1]} {{
              color: hotpink;
            }}
        ");
    }
}